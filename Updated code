/*
 * @license Released under the MIT License.
 * Original code designed for servo motor-based lock actuator.
 * Modified by Dilan Ravindu (mbdilanravindu1777@gmail.com) for solenoid control.
 * 
 * Typical pin layout used:
 * ----------------------------------------------------------------------------------------- 
 *             MFRC522      Arduino       Arduino   Arduino    Arduino          Arduino
 *             Reader/PCD   Uno/101       Mega      Nano v3    Leonardo/Micro   Pro Micro
 * Signal      Pin          Pin           Pin       Pin        Pin              Pin
 * ----------------------------------------------------------------------------------------- 
 * RST/Reset   RST          9             5         D9         RESET/ICSP-5     RST
 * SPI SS      SDA(SS)      10            53        D10        10               10
 * SPI MOSI    MOSI         11 / ICSP-4   51        D11        ICSP-4           16
 * SPI MISO    MISO         12 / ICSP-1   50        D12        ICSP-1           14
 * SPI SCK     SCK          13 / ICSP-3   52        D13        ICSP-3           15
 */

/*
 * Other Pin Connections
 * Red LED - 6
 * Green LED - 7
 * Blue LED - 5
 * Solenoid pin - 8
 * Push Button (Wipe) - 3
 * Door Unlock Button - 2
 * Buzzer - 4 (NEW: Added for audible feedback)
 */

#include <EEPROM.h>     // We are going to read and write PICC's UIDs from/to EEPROM
#include <SPI.h>        // RC522 Module uses SPI protocol
#include <MFRC522.h>    // Library for Mifare RC522 Devices

// Define LED and button behavior for common anode or cathode
//#define COMMON_ANODE

#ifdef COMMON_ANODE
#define LED_ON LOW
#define LED_OFF HIGH
#else
#define LED_ON HIGH
#define LED_OFF LOW
#endif

#define redLed 6    // Set LED Pins
#define greenLed 7
#define blueLed 5
#define sol 8       // Solenoid pin (modified from servo)
#define wipeB 3     // Button pin for WipeMode
#define doorUnlock 2  // Button on the inside
#define buzzerPin 4 // NEW: Buzzer pin for audible feedback

#define UNLOCK_DURATION 5000 // NEW: Configurable solenoid unlock duration (ms)

boolean match = false;        // Initialize card match to false
boolean programMode = false;  // Initialize programming mode to false
boolean replaceMaster = false;
unsigned long lastActivity = 0; // NEW: Track last activity for program mode timeout

uint8_t successRead;    // Variable to keep if we have successful read from reader
byte storedCard[4];     // Stores an ID read from EEPROM
byte readCard[4];       // Stores scanned ID read from RFID Module
byte masterCard[4];     // Stores master card's ID read from EEPROM

// Create MFRC522 instance
#define SS_PIN 10
#define RST_PIN 9
MFRC522 mfrc522(SS_PIN, RST_PIN); 

///////////////////////////////////////// Setup ///////////////////////////////////
void setup() {
  // Arduino Pin Configuration
  pinMode(redLed, OUTPUT);
  pinMode(greenLed, OUTPUT);
  pinMode(blueLed, OUTPUT);
  pinMode(buzzerPin, OUTPUT);       // NEW: Initialize buzzer pin
  pinMode(wipeB, INPUT_PULLUP);     // Enable pin's pull-up resistor
  pinMode(doorUnlock, INPUT_PULLUP);
  pinMode(sol, OUTPUT);             // Configure solenoid pin
  digitalWrite(sol, LOW);           // Ensure door is locked
  digitalWrite(redLed, LED_OFF);    // Ensure LEDs are off
  digitalWrite(greenLed, LED_OFF);
  digitalWrite(blueLed, LED_OFF);
  digitalWrite(buzzerPin, LOW);     // NEW: Ensure buzzer is off

  // Protocol Configuration
  Serial.begin(9600);    // Initialize serial communications with PC
  SPI.begin();           // MFRC522 Hardware uses SPI protocol
  mfrc522.PCD_Init();    // Initialize MFRC522 Hardware
  mfrc522.PCD_SetAntennaGain(mfrc522.RxGain_max);

  Serial.println(F("Relay Door Control (Solenoid Modified)")); // Updated for solenoid
  ShowReaderDetails(); // Show MFRC522 Card Reader details

  // Wipe Code - If Wipe Button Pressed during setup, wipe EEPROM
  if (digitalRead(wipeB) == LOW) {
    digitalWrite(redLed, LED_ON);
    Serial.println(F("Wipe Button Pressed"));
    Serial.println(F("You have 15 seconds to Cancel"));
    Serial.println(F("This will remove all records and cannot be undone"));
    delay(15000);
    if (digitalRead(wipeB) == LOW) {
      Serial.println(F("Starting Wiping EEPROM"));
      for (uint8_t x = 0; x < EEPROM.length(); x++) {
        if (EEPROM.read(x) == 0) {
          // Do nothing, already clear
        } else {
          EEPROM.write(x, 0);
        }
      }
      Serial.println(F("EEPROM Successfully Wiped"));
      digitalWrite(redLed, LED_OFF);
      delay(200);
      digitalWrite(redLed, LED_ON);
      delay(200);
      digitalWrite(redLed, LED_OFF);
      delay(200);
      digitalWrite(redLed, LED_ON);
      delay(200);
      digitalWrite(redLed, LED_OFF);
      beep(3, 100); // NEW: Beep to confirm wipe
    } else {
      Serial.println(F("Wiping Cancelled"));
      digitalWrite(redLed, LED_OFF);
    }
  }

  // Check if master card is defined
  if (EEPROM.read(1) != 143) {
    Serial.println(F("No Master Card Defined"));
    Serial.println(F("Scan A PICC to Define as Master Card"));
    do {
      successRead = getID();
      digitalWrite(blueLed, LED_ON);
      delay(200);
      digitalWrite(blueLed, LED_OFF);
      delay(200);
    } while (!successRead);
    for (uint8_t j = 0; j < 4; j++) {
      EEPROM.write(2 + j, readCard[j]);
    }
    EEPROM.write(1, 143);
    Serial.println(F("Master Card Defined"));
    beep(2, 200); // NEW: Beep to confirm master card definition
  }

  Serial.println(F("-------------------"));
  Serial.println(F("Master Card's UID"));
  for (uint8_t i = 0; i < 4; i++) {
    masterCard[i] = EEPROM.read(2 + i);
    Serial.print(masterCard[i], HEX);
  }
  Serial.println("");
  Serial.println(F("-------------------"));
  Serial.println(F("Everything Ready"));
  Serial.println(F("Waiting PICCs to be scanned"));
  cycleLeds();
}

///////////////////////////////////////// Main Loop ///////////////////////////////////
void loop() {
  do {
    successRead = getID();
    // Check for wipe button during operation
    if (digitalRead(wipeB) == LOW) {
      digitalWrite(redLed, LED_ON);
      digitalWrite(greenLed, LED_OFF);
      digitalWrite(blueLed, LED_OFF);
      Serial.println(F("Wipe Button Pressed"));
      Serial.println(F("Master Card will be Erased! in 10 seconds"));
      delay(10000);
      if (digitalRead(wipeB) == LOW) {
        EEPROM.write(1, 0);
        Serial.println(F("Restart device to re-program Master Card"));
        beep(3, 100); // NEW: Beep to confirm wipe
        while (1);
      }
      digitalWrite(redLed, LED_OFF);
    }
    // Manual door unlock
    if (digitalRead(doorUnlock) == LOW) {
      Serial.println(F("Welcome, You shall pass"));
      granted(UNLOCK_DURATION); // Use configurable duration
    }
    // NEW: Timeout for program mode (30 seconds)
    if (programMode && (millis() - lastActivity > 30000)) {
      Serial.println(F("Program Mode Timeout"));
      programMode = false;
      normalModeOn();
      beep(2, 100); // NEW: Beep to indicate timeout
    }
    if (programMode) {
      cycleLeds();
    } else {
      normalModeOn();
    }
  } while (!successRead);

  // Update last activity time when a card is read
  if (successRead) {
    lastActivity = millis(); // NEW: Update activity timestamp
  }

  if (programMode) {
    if (isMaster(readCard)) {
      Serial.println(F("Master Card Scanned"));
      Serial.println(F("Exiting Program Mode"));
      Serial.println(F("-----------------------------"));
      programMode = false;
      beep(2, 200); // NEW: Beep to confirm exit
      return;
    } else {
      if (findID(readCard)) {
        Serial.println(F("I know this PICC, removing..."));
        deleteID(readCard);
        Serial.println("-----------------------------");
        Serial.println(F("Scan a PICC to ADD or REMOVE to EEPROM"));
      } else {
        Serial.println(F("I do not know this PICC, adding..."));
        writeID(readCard);
        Serial.println(F("-----------------------------"));
        Serial.println(F("Scan a PICC to ADD or REMOVE to EEPROM"));
      }
    }
  } else {
    if (isMaster(readCard)) {
      programMode = true;
      Serial.println(F("Hello Master - Entered Program Mode"));
      uint8_t count = EEPROM.read(0);
      Serial.print(F("I have "));
      Serial.print(count);
      Serial.print(F(" record(s) on EEPROM"));
      Serial.println("");
      Serial.println(F("Scan a PICC to ADD or REMOVE to EEPROM"));
      Serial.println(F("Scan Master Card again to Exit Program Mode"));
      Serial.println(F("-----------------------------"));
      lastActivity = millis(); // NEW: Set activity timestamp
      beep(2, 200); // NEW: Beep to confirm entering program mode
    } else {
      if (findID(readCard)) {
        Serial.println(F("Welcome, You shall pass"));
        granted(UNLOCK_DURATION); // Use configurable duration
      } else {
        Serial.println(F("You shall not pass"));
        denied();
      }
    }
  }
}

///////////////////////////////////////// Access Granted ///////////////////////////////////
void granted(uint16_t setDelay) {
  digitalWrite(blueLed, LED_OFF);
  digitalWrite(redLed, LED_OFF);
  digitalWrite(greenLed, LED_ON);
  digitalWrite(sol, HIGH); // Unlock door
  beep(1, 500); // NEW: Single long beep for granted access
  delay(setDelay);
  digitalWrite(sol, LOW); // Relock door
  delay(1000);
}

///////////////////////////////////////// Access Denied ///////////////////////////////////
void denied() {
  digitalWrite(greenLed, LED_OFF);
  digitalWrite(blueLed, LED_OFF);
  digitalWrite(redLed, LED_ON);
  beep(3, 100); // NEW: Three short beeps for denied access
  delay(1000);
}

///////////////////////////////////////// Get PICC's UID ///////////////////////////////////
uint8_t getID() {
  if (!mfrc522.PICC_IsNewCardPresent()) {
    return 0;
  }
  if (!mfrc522.PICC_ReadCardSerial()) {
    return 0;
  }
  Serial.println(F("Scanned PICC's UID:"));
  for (uint8_t i = 0; i < 4; i++) {
    readCard[i] = mfrc522.uid.uidByte[i];
    Serial.print(readCard[i], HEX);
  }
  Serial.println("");
  mfrc522.PICC_HaltA();
  return 1;
}

///////////////////////////////////////// Show Reader Details ///////////////////////////////////
void ShowReaderDetails() {
  byte v = mfrc522.PCD_ReadRegister(mfrc522.VersionReg);
  Serial.print(F("MFRC522 Software Version: 0x"));
  Serial.print(v, HEX);
  if (v == 0x91)
    Serial.print(F(" = v1.0"));
  else if (v == 0x92)
    Serial.print(F(" = v2.0"));
  else
    Serial.print(F(" (unknown), probably a clone?"));
  Serial.println("");
  if ((v == 0x00) || (v == 0xFF)) {
    Serial.println(F("WARNING: Communication failure, is the MFRC522 properly connected?"));
    Serial.println(F("SYSTEM HALTED: Check connections."));
    digitalWrite(greenLed, LED_OFF);
    digitalWrite(blueLed, LED_OFF);
    digitalWrite(redLed, LED_ON);
    beep(5, 100); // NEW: Beep to indicate error
    while (true);
  }
}

///////////////////////////////////////// Cycle LEDs (Program Mode) ///////////////////////////////////
void cycleLeds() {
  digitalWrite(redLed, LED_OFF);
  digitalWrite(greenLed, LED_ON);
  digitalWrite(blueLed, LED_OFF);
  delay(200);
  digitalWrite(redLed, LED_OFF);
  digitalWrite(greenLed, LED_OFF);
  digitalWrite(blueLed, LED_ON);
  delay(200);
  digitalWrite(redLed, LED_ON);
  digitalWrite(greenLed, LED_OFF);
  digitalWrite(blueLed, LED_OFF);
  delay(200);
}

///////////////////////////////////////// Normal Mode LED ///////////////////////////////////
void normalModeOn() {
  digitalWrite(blueLed, LED_ON);
  digitalWrite(redLed, LED_OFF);
  digitalWrite(greenLed, LED_OFF);
  digitalWrite(sol, LOW); // Ensure door is locked
}

///////////////////////////////////////// Read an ID from EEPROM ///////////////////////////////////
void readID(uint8_t number) {
  uint8_t start = (number * 4) + 2;
  for (uint8_t i = 0; i < 4; i++) {
    storedCard[i] = EEPROM.read(start + i);
  }
}

///////////////////////////////////////// Add ID to EEPROM ///////////////////////////////////
void writeID(byte a[]) {
  if (!findID(a)) {
    uint8_t num = EEPROM.read(0);
    uint8_t start = (num * 4) + 6;
    num++;
    EEPROM.write(0, num);
    for (uint8_t j = 0; j < 4; j++) {
      EEPROM.write(start + j, a[j]);
    }
    successWrite();
    Serial.println(F("Successfully added ID record to EEPROM"));
  } else {
    failedWrite();
    Serial.println(F("Failed! There is something wrong with ID or bad EEPROM"));
  }
}

///////////////////////////////////////// Remove ID from EEPROM ///////////////////////////////////
void deleteID(byte a[]) {
  if (!findID(a)) {
    failedWrite();
    Serial.println(F("Failed! There is something wrong with ID or bad EEPROM"));
  } else {
    uint8_t num = EEPROM.read(0);
    uint8_t slot = findIDSLOT(a);
    uint8_t start = (slot * 4) + 2;
    uint8_t looping = ((num - slot) * 4);
    num--;
    EEPROM.write(0, num);
    for (uint8_t j = 0; j < looping; j++) {
      EEPROM.write(start + j, EEPROM.read(start + 4 + j));
    }
    for (uint8_t k = 0; k < 4; k++) {
      EEPROM.write(start + j + k, 0);
    }
    successDelete();
    Serial.println(F("Successfully removed ID record from EEPROM"));
  }
}

///////////////////////////////////////// Check Bytes ///////////////////////////////////
boolean checkTwo(byte a[], byte b[]) {
  if (a[0] != 0)
    match = true;
  for (uint8_t k = 0; k < 4; k++) {
    if (a[k] != b[k])
      match = false;
  }
  return match;
}

///////////////////////////////////////// Find Slot ///////////////////////////////////
uint8_t findIDSLOT(byte find[]) {
  uint8_t count = EEPROM.read(0);
  for (uint8_t i = 1; i <= count; i++) {
    readID(i);
    if (checkTwo(find, storedCard)) {
      return i;
    }
  }
  return 0; // Return 0 if not found
}

///////////////////////////////////////// Find ID From EEPROM ///////////////////////////////////
boolean findID(byte find[]) {
  uint8_t count = EEPROM.read(0);
  for (uint8_t i = 1; i <= count; i++) {
    readID(i);
    if (checkTwo(find, storedCard)) {
      return true;
    }
  }
  return false;
}

///////////////////////////////////////// Write Success to EEPROM ///////////////////////////////////
void successWrite() {
  digitalWrite(blueLed, LED_OFF);
  digitalWrite(redLed, LED_OFF);
  digitalWrite(greenLed, LED_OFF);
  delay(200);
  digitalWrite(greenLed, LED_ON);
  delay(200);
  digitalWrite(greenLed, LED_OFF);
  delay(200);
  digitalWrite(greenLed, LED_ON);
  delay(200);
  digitalWrite(greenLed, LED_OFF);
  delay(200);
  digitalWrite(greenLed, LED_ON);
  delay(200);
  beep(2, 200); // NEW: Beep to confirm success
}

///////////////////////////////////////// Write Failed to EEPROM ///////////////////////////////////
void failedWrite() {
  digitalWrite(blueLed, LED_OFF);
  digitalWrite(redLed, LED_OFF);
  digitalWrite(greenLed, LED_OFF);
  delay(200);
  digitalWrite(redLed, LED_ON);
  delay(200);
  digitalWrite(redLed, LED_OFF);
  delay(200);
  digitalWrite(redLed, LED_ON);
  delay(200);
  digitalWrite(redLed, LED_OFF);
  delay(200);
  digitalWrite(redLed, LED_ON);
  delay(200);
  beep(3, 100); // NEW: Beep to indicate failure
}

///////////////////////////////////////// Success Remove UID From EEPROM ///////////////////////////////////
void successDelete() {
  digitalWrite(blueLed, LED_OFF);
  digitalWrite(redLed, LED_OFF);
  digitalWrite(greenLed, LED_OFF);
  delay(200);
  digitalWrite(blueLed, LED_ON);
  delay(200);
  digitalWrite(blueLed, LED_OFF);
  delay(200);
  digitalWrite(blueLed, LED_ON);
  delay(200);
  digitalWrite(blueLed, LED_OFF);
  delay(200);
  digitalWrite(blueLed, LED_ON);
  delay(200);
  beep(2, 200); // NEW: Beep to confirm deletion
}

///////////////////////////////////////// Check if Master Card ///////////////////////////////////
boolean isMaster(byte test[]) {
  return checkTwo(test, masterCard);
}

///////////////////////////////////////// NEW: Beep Function ///////////////////////////////////
void beep(uint8_t count, uint16_t duration) {
  for (uint8_t i = 0; i < count; i++) {
    digitalWrite(buzzerPin, HIGH);
    delay(duration);
    digitalWrite(buzzerPin, LOW);
    delay(duration);
  }
}
